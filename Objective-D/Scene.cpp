#include "Scene.h"
#include "GameResource.h"
#include "CBVUtil.h"
#include "RootConstants.h"
#include "MouseUtil.h"

// 이 프로젝트의 핵심 유틸이다. 프로그램의 모든 객체의 업데이트 및 렌더링은 모두 이 프레임워크를 거친다.

// 프레임워크를 초기화 한다. 실행 시 단 한 번만 실행되는 함수로, 더미 객체를 추가한 후 모드를 시작한다.
void Scene::Init(ID3D12Device* Device, ID3D12GraphicsCommandList* CmdList, Function ModeFunction) {
	// 루트 시그니처를 생성한다.
	RootSignature = CreateGraphicsRootSignature(Device);

	// 전역 쉐이더를 생성한다.
	CreateShaderResource(RootSignature, Device, CmdList);

	// 전역 매쉬를 생성한다.
	CreateMeshResource(Device, CmdList);

	// 전역 텍스처를 생성한다
	CreateTextureResource(Device, CmdList);

	// 시작 모드 함수 실행
	ModeFunction();
}

// 현재 실행 중인 모드 이름을 리턴한다
const char* Scene::GetMode() {
	return RunningMode;
}

// 모드 소멸자를 등록한다.
void Scene::RegisterDestructor(Function Destructor) {
	DestructorBuffer = Destructor;
}

// 모드 소멸자 포인터를 끊는다.
void Scene::ReleaseDestructor() {
	DestructorBuffer = nullptr;
}

// 현재 존재하는 모든 객체들을 업데이트하고 렌더링한다.
// 삭제 마크가 표시된 객체들은 오브젝트 리스트에서 삭제된다. (실제 객체 삭제가 아님)
void Scene::Routine(float FT, ID3D12GraphicsCommandList* CmdList) {
	ObjectCmdList = CmdList;

	for (int i = 0; i < Layers; ++i) {
		for (auto It = begin(ObjectList[i]); It != end(ObjectList[i]);) {
			if (!(*It)->ObjectDeleteCommand) {
				(*It)->Update(FT);
				(*It)->Render();
			}

			else {
				It = ObjectList[i].erase(It);
				continue;
			}

			++It;
		}
	}
}

// 모드를 변경한다. 모드 변경 시 기존 scene에 있던 객체들은 모두 삭제된다.
void Scene::SwitchMode(Function ModeFunction) {
	ClearAll();
	if (DestructorBuffer)
		DestructorBuffer();
	ModeFunction();
}

// 모드 이름을 등록한다. 중복되는 모드 이름을 등록하지 않도록 유의한다.
void Scene::RegisterModeName(const char* ModeName) {
	RunningMode = ModeName;
}

// 컨트롤러 설정 함수이다. 이 함수를 직접 작성할 일은 없다,
void Scene::RegisterKeyController(void (*FunctionPtr)(HWND, UINT, WPARAM, LPARAM)) {
	KeyboardControllerPtr = FunctionPtr;
}
void Scene::RegisterMouseController(void (*FunctionPtr)(HWND, UINT, WPARAM, LPARAM)) {
	MouseControllerPtr = FunctionPtr;
}
void Scene::RegisterMouseMotionController(void (*FunctionPtr)(HWND)) {
	MouseMotionControllerPtr = FunctionPtr;
}

// 객체를 찾아 컨트롤러 함수로 메시지를 전달한다. 다수로 존재하는 객체에 사용하지 않도록 유의한다.
void Scene::InputMouse(HWND hWnd, UINT nMessageID, WPARAM wParam, LPARAM lParam, const char* ObjectTag) {
	auto It = ObjectIndex.find(ObjectTag);
	if (It != end(ObjectIndex) && !It->second->ObjectDeleteCommand)
		It->second->InputMouse(hWnd, nMessageID, wParam, lParam);
}
void Scene::InputKey(HWND hWnd, UINT nMessageID, WPARAM wParam, LPARAM lParam, const char* ObjectTag) {
	auto It = ObjectIndex.find(ObjectTag);
	if (It != end(ObjectIndex) && !It->second->ObjectDeleteCommand)
		It->second->InputKey(hWnd, nMessageID, wParam, lParam);
}
void Scene::InputMouseMotion(HWND hWnd,  const char* ObjectTag) {
	auto It = ObjectIndex.find(ObjectTag);
	if (It != end(ObjectIndex) && !It->second->ObjectDeleteCommand)
		It->second->InputMouseMotion(hWnd, mouse.MotionPosition);
}

// 객체를 추가한다. 원하는 객체와 태그, 레이어를 설정할 수 있다.
// 이 함수에서 입력한 태그는 Find()함수에서 사용된다.
void Scene::AddObject(GameObject*&& Object, const char* Tag, int InputLayer) {
	ObjectList[InputLayer].emplace_back(Object);
	ObjectIndex.insert(std::make_pair(Tag, Object));
	Object->ObjectTag = Tag;
}

// 포인터를 사용하여 객체를 삭제한다. 객체에 삭제 마크를 표시한다.
// 이 코드가 실행되는 시점에 즉시 삭제되지 않음에 유의한다.
// 삭제 마크가 표시된 객체는 UpdateObjectIndex()에서 최종적으로 삭제된다.
// 클래스 내부에서 this 포인터로도 자신을 삭제할 수 있다.
void Scene::DeleteObject(GameObject* Object) {
	Object->ObjectDeleteCommand = true;
}

// 현재 존재하는 객체들 중 특정 객체의 포인터를 얻어 접근할 때 사용한다.
// 이진 탐색을 사용하여 검색하므로 매우 빠르다.
GameObject* Scene::Find(const char* Tag) {
	auto It = ObjectIndex.find(Tag);
	if (It != std::end(ObjectIndex) && !It->second->ObjectDeleteCommand)
		return It->second;
	else
		return nullptr;
}

// 특정 태그를 가진 오브젝트들의 포인터 범위를 리턴한다.
// 해당 함수로 equal range를 얻어 for문으로 접근하면 된다.
std::pair<ObjectRange, ObjectRange> Scene::EqualRange(const char* Tag) {
	return ObjectIndex.equal_range(Tag);
}

// 현재 존재하는 모든 객체들을 삭제한다.
void Scene::ClearAll() {
	for (const auto& O : ObjectIndex)
		O.second->ObjectDeleteCommand = true;
}

// 삭제 마크가 표시된 객체들을 실제로 삭제한다.
void Scene::ProcessIndexCommand() {
	for (auto It = begin(ObjectIndex); It != end(ObjectIndex);) {
		if (It->second->ObjectDeleteCommand) {
			delete It->second;
			It->second = nullptr;
			It = ObjectIndex.erase(It);
			continue;
		}
		++It;
	}
}

// 프로그램을 종료한다.
void Scene::Exit() {
	PostQuitMessage(1);
}


// 키보드, 마우스, 마우스 움직임을 WinMain으로부터 받아온다. 직접 쓸 일은 없다.
void Scene::InputKeyMessage(HWND hWnd, UINT nMessageID, WPARAM wParam, LPARAM lParam) {
	if (KeyboardControllerPtr)
		KeyboardControllerPtr(hWnd, nMessageID, wParam, lParam);
}
void Scene::InputMouseMessage(HWND hWnd, UINT nMessageID, WPARAM wParam, LPARAM lParam) {
	if (MouseControllerPtr)
		MouseControllerPtr(hWnd, nMessageID, wParam, lParam);
}
void Scene::InputMouseMotionMessage(HWND hWnd) {
	if (MouseMotionControllerPtr)
		MouseMotionControllerPtr(hWnd);
}

// 루트 시그니처를 리턴한다
ID3D12RootSignature* Scene::GetGraphicsRootSignature() {
	return(RootSignature);
}

// 루트시그니처를 릴리즈한다
void Scene::ReleaseObjects() {
	if (RootSignature)
		RootSignature->Release();
}

// 렌더링을 준비한다
void Scene::PrepareRender(ID3D12GraphicsCommandList* CmdList) {
	CmdList->SetGraphicsRootSignature(RootSignature);
}